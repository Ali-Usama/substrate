// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_safe_mode
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-12, STEPS: `1`, REPEAT: 1, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `pop-os`, CPU: `AMD Ryzen 7 1800X Eight-Core Processor`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/substrate
// benchmark
// pallet
// --steps
// 1
// --repeat
// 1
// --extrinsic
// *
// --execution
// wasm
// --wasm-execution
// compiled
// --heap-pages
// 4096
// --pallet
// pallet_safe_mode
// --chain
// dev
// --output
// frame/safe-mode/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_safe_mode.
pub trait WeightInfo {
	fn activate() -> Weight;
	fn force_activate() -> Weight;
	fn extend() -> Weight;
	fn force_extend() -> Weight;
	fn force_deactivate() -> Weight;
	fn release_reservation() -> Weight;
	fn slash_reservation() -> Weight;
}

/// Weights for pallet_safe_mode using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Balances Reserves (r:1 w:1)
	// Storage: SafeMode Reservations (r:1 w:1)
	// Storage: SafeMode ActiveUntil (r:1 w:1)
	fn activate() -> Weight {
		Weight::from_ref_time(83_536_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: SafeMode ActiveUntil (r:1 w:1)
	fn force_activate() -> Weight {
		Weight::from_ref_time(44_232_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Balances Reserves (r:1 w:1)
	// Storage: SafeMode Reservations (r:1 w:1)
	// Storage: SafeMode ActiveUntil (r:1 w:1)
	fn extend() -> Weight {
		Weight::from_ref_time(85_289_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: SafeMode ActiveUntil (r:1 w:1)
	fn force_extend() -> Weight {
		Weight::from_ref_time(42_209_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: SafeMode ActiveUntil (r:1 w:1)
	fn force_deactivate() -> Weight {
		Weight::from_ref_time(37_661_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: SafeMode ActiveUntil (r:1 w:0)
	// Storage: SafeMode Reservations (r:1 w:1)
	// Storage: Balances Reserves (r:1 w:1)
	fn release_reservation() -> Weight {
		Weight::from_ref_time(76_964_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: SafeMode ActiveUntil (r:1 w:0)
	// Storage: SafeMode Reservations (r:1 w:1)
	// Storage: Balances Reserves (r:1 w:1)
	fn slash_reservation() -> Weight {
		Weight::from_ref_time(88_074_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Balances Reserves (r:1 w:1)
	// Storage: SafeMode Reservations (r:1 w:1)
	// Storage: SafeMode ActiveUntil (r:1 w:1)
	fn activate() -> Weight {
		Weight::from_ref_time(83_536_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: SafeMode ActiveUntil (r:1 w:1)
	fn force_activate() -> Weight {
		Weight::from_ref_time(44_232_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Balances Reserves (r:1 w:1)
	// Storage: SafeMode Reservations (r:1 w:1)
	// Storage: SafeMode ActiveUntil (r:1 w:1)
	fn extend() -> Weight {
		Weight::from_ref_time(85_289_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: SafeMode ActiveUntil (r:1 w:1)
	fn force_extend() -> Weight {
		Weight::from_ref_time(42_209_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: SafeMode ActiveUntil (r:1 w:1)
	fn force_deactivate() -> Weight {
		Weight::from_ref_time(37_661_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: SafeMode ActiveUntil (r:1 w:0)
	// Storage: SafeMode Reservations (r:1 w:1)
	// Storage: Balances Reserves (r:1 w:1)
	fn release_reservation() -> Weight {
		Weight::from_ref_time(76_964_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: SafeMode ActiveUntil (r:1 w:0)
	// Storage: SafeMode Reservations (r:1 w:1)
	// Storage: Balances Reserves (r:1 w:1)
	fn slash_reservation() -> Weight {
		Weight::from_ref_time(88_074_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
}
