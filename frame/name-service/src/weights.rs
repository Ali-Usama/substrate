
//! Autogenerated weights for pallet_name_service
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-06, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// target/release/substrate
// benchmark
// pallet
// --execution
// wasm
// --wasm-execution
// compiled
// --dev
// --pallet
// pallet-name-service
// --steps
// 50
// --repeat
// 20
// --output
// frame/name-service/src/weights.rs
// --template
// .maintain/frame-weight-template.hbs
// --extrinsic
// *

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_name_service.
pub trait WeightInfo {
	fn force_register() -> Weight;
	fn commit() -> Weight;
	fn reveal(l: u32, ) -> Weight;
}

/// Weights for pallet_name_service using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: NameService Registrations (r:1 w:1)
	/// Proof: NameService Registrations (max_values: None, max_size: Some(94), added: 2569, mode: MaxEncodedLen)
	/// Storage: NameService CounterForRegistrations (r:1 w:1)
	/// Proof: NameService CounterForRegistrations (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn force_register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `403`
		//  Estimated: `3559`
		// Minimum execution time: 22_000_000 picoseconds.
		Weight::from_parts(23_000_000, 3559)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: NameService Commitments (r:1 w:1)
	/// Proof: NameService Commitments (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	/// Storage: NameService CommitmentDeposit (r:1 w:0)
	/// Proof: NameService CommitmentDeposit (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn commit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `319`
		//  Estimated: `3597`
		// Minimum execution time: 36_000_000 picoseconds.
		Weight::from_parts(36_000_000, 3597)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: NameService Commitments (r:1 w:1)
	/// Proof: NameService Commitments (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	/// Storage: NameService Registrations (r:1 w:1)
	/// Proof: NameService Registrations (max_values: None, max_size: Some(94), added: 2569, mode: MaxEncodedLen)
	/// Storage: NameService TierDefault (r:1 w:0)
	/// Proof: NameService TierDefault (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: NameService RegistrationFeePerBlock (r:1 w:0)
	/// Proof: NameService RegistrationFeePerBlock (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: NameService CounterForRegistrations (r:1 w:1)
	/// Proof: NameService CounterForRegistrations (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: NameService TierThreeLetters (r:1 w:0)
	/// Proof: NameService TierThreeLetters (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// The range of component `l` is `[3, 2048]`.
	fn reveal(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `516`
		//  Estimated: `3597 + l * (450 ±0)`
		// Minimum execution time: 67_000_000 picoseconds.
		Weight::from_parts(68_504_350, 3597)
			// Standard Error: 51
			.saturating_add(Weight::from_parts(2_095, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 450).saturating_mul(l.into()))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: NameService Registrations (r:1 w:1)
	/// Proof: NameService Registrations (max_values: None, max_size: Some(94), added: 2569, mode: MaxEncodedLen)
	/// Storage: NameService CounterForRegistrations (r:1 w:1)
	/// Proof: NameService CounterForRegistrations (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn force_register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `403`
		//  Estimated: `3559`
		// Minimum execution time: 22_000_000 picoseconds.
		Weight::from_parts(23_000_000, 3559)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: NameService Commitments (r:1 w:1)
	/// Proof: NameService Commitments (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	/// Storage: NameService CommitmentDeposit (r:1 w:0)
	/// Proof: NameService CommitmentDeposit (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn commit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `319`
		//  Estimated: `3597`
		// Minimum execution time: 36_000_000 picoseconds.
		Weight::from_parts(36_000_000, 3597)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: NameService Commitments (r:1 w:1)
	/// Proof: NameService Commitments (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
	/// Storage: NameService Registrations (r:1 w:1)
	/// Proof: NameService Registrations (max_values: None, max_size: Some(94), added: 2569, mode: MaxEncodedLen)
	/// Storage: NameService TierDefault (r:1 w:0)
	/// Proof: NameService TierDefault (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: NameService RegistrationFeePerBlock (r:1 w:0)
	/// Proof: NameService RegistrationFeePerBlock (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: NameService CounterForRegistrations (r:1 w:1)
	/// Proof: NameService CounterForRegistrations (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: NameService TierThreeLetters (r:1 w:0)
	/// Proof: NameService TierThreeLetters (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// The range of component `l` is `[3, 2048]`.
	fn reveal(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `516`
		//  Estimated: `3597 + l * (450 ±0)`
		// Minimum execution time: 67_000_000 picoseconds.
		Weight::from_parts(68_504_350, 3597)
			// Standard Error: 51
			.saturating_add(Weight::from_parts(2_095, 0).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 450).saturating_mul(l.into()))
	}
}
