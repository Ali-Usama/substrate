// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_contracts
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-06-29, STEPS: `1`, REPEAT: 1, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `lisbon`, CPU: `AMD Ryzen 7 5800H with Radeon Graphics`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/release/substrate
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --pallet
// pallet_contracts
// --extrinsic=*
// --output=./frame/contracts/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_contracts.
pub trait WeightInfo {
	fn on_process_deletion_queue_batch() -> Weight;
	fn on_initialize_per_trie_key(k: u32, ) -> Weight;
	fn on_initialize_per_queue_item(q: u32, ) -> Weight;
	fn reinstrument(c: u32, ) -> Weight;
	fn call_with_code_per_byte(c: u32, ) -> Weight;
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight;
	fn instantiate(s: u32, ) -> Weight;
	fn call() -> Weight;
	fn upload_code(c: u32, ) -> Weight;
	fn remove_code() -> Weight;
	fn set_code() -> Weight;
	fn seal_caller(r: u32, ) -> Weight;
	fn seal_is_contract(r: u32, ) -> Weight;
	fn seal_code_hash(r: u32, ) -> Weight;
	fn seal_own_code_hash(r: u32, ) -> Weight;
	fn seal_caller_is_origin(r: u32, ) -> Weight;
	fn seal_address(r: u32, ) -> Weight;
	fn seal_gas_left(r: u32, ) -> Weight;
	fn seal_balance(r: u32, ) -> Weight;
	fn seal_value_transferred(r: u32, ) -> Weight;
	fn seal_minimum_balance(r: u32, ) -> Weight;
	fn seal_block_number(r: u32, ) -> Weight;
	fn seal_now(r: u32, ) -> Weight;
	fn seal_weight_to_fee(r: u32, ) -> Weight;
	fn seal_gas(r: u32, ) -> Weight;
	fn seal_input(r: u32, ) -> Weight;
	fn seal_input_per_kb(n: u32, ) -> Weight;
	fn seal_return(r: u32, ) -> Weight;
	fn seal_return_per_kb(n: u32, ) -> Weight;
	fn seal_terminate(r: u32, ) -> Weight;
	fn seal_random(r: u32, ) -> Weight;
	fn seal_deposit_event(r: u32, ) -> Weight;
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight;
	fn seal_debug_message(r: u32, ) -> Weight;
	fn seal_set_storage(r: u32, ) -> Weight;
	fn seal_set_storage_per_new_kb(n: u32, ) -> Weight;
	fn seal_set_storage_per_old_kb(n: u32, ) -> Weight;
	fn seal_clear_storage(r: u32, ) -> Weight;
	fn seal_clear_storage_per_kb(n: u32, ) -> Weight;
	fn seal_get_storage(r: u32, ) -> Weight;
	fn seal_get_storage_per_kb(n: u32, ) -> Weight;
	fn seal_contains_storage(r: u32, ) -> Weight;
	fn seal_contains_storage_per_kb(n: u32, ) -> Weight;
	fn seal_take_storage(r: u32, ) -> Weight;
	fn seal_take_storage_per_kb(n: u32, ) -> Weight;
	fn seal_transfer(r: u32, ) -> Weight;
	fn seal_call(r: u32, ) -> Weight;
	fn seal_delegate_call(r: u32, ) -> Weight;
	fn seal_call_per_transfer_clone_kb(t: u32, c: u32, ) -> Weight;
	fn seal_instantiate(r: u32, ) -> Weight;
	fn seal_instantiate_per_transfer_salt_kb(t: u32, s: u32, ) -> Weight;
	fn seal_hash_sha2_256(r: u32, ) -> Weight;
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_keccak_256(r: u32, ) -> Weight;
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_256(r: u32, ) -> Weight;
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_128(r: u32, ) -> Weight;
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight;
	fn seal_ecdsa_recover(r: u32, ) -> Weight;
	fn seal_ecdsa_to_eth_address(r: u32, ) -> Weight;
	fn seal_set_code_hash(r: u32, ) -> Weight;
	fn instr_i64const(r: u32, ) -> Weight;
	fn instr_i64load(r: u32, ) -> Weight;
	fn instr_i64store(r: u32, ) -> Weight;
	fn instr_select(r: u32, ) -> Weight;
	fn instr_if(r: u32, ) -> Weight;
	fn instr_br(r: u32, ) -> Weight;
	fn instr_br_if(r: u32, ) -> Weight;
	fn instr_br_table(r: u32, ) -> Weight;
	fn instr_br_table_per_entry(e: u32, ) -> Weight;
	fn instr_call(r: u32, ) -> Weight;
	fn instr_call_indirect(r: u32, ) -> Weight;
	fn instr_call_indirect_per_param(p: u32, ) -> Weight;
	fn instr_local_get(r: u32, ) -> Weight;
	fn instr_local_set(r: u32, ) -> Weight;
	fn instr_local_tee(r: u32, ) -> Weight;
	fn instr_global_get(r: u32, ) -> Weight;
	fn instr_global_set(r: u32, ) -> Weight;
	fn instr_memory_current(r: u32, ) -> Weight;
	fn instr_memory_grow(r: u32, ) -> Weight;
	fn instr_i64clz(r: u32, ) -> Weight;
	fn instr_i64ctz(r: u32, ) -> Weight;
	fn instr_i64popcnt(r: u32, ) -> Weight;
	fn instr_i64eqz(r: u32, ) -> Weight;
	fn instr_i64extendsi32(r: u32, ) -> Weight;
	fn instr_i64extendui32(r: u32, ) -> Weight;
	fn instr_i32wrapi64(r: u32, ) -> Weight;
	fn instr_i64eq(r: u32, ) -> Weight;
	fn instr_i64ne(r: u32, ) -> Weight;
	fn instr_i64lts(r: u32, ) -> Weight;
	fn instr_i64ltu(r: u32, ) -> Weight;
	fn instr_i64gts(r: u32, ) -> Weight;
	fn instr_i64gtu(r: u32, ) -> Weight;
	fn instr_i64les(r: u32, ) -> Weight;
	fn instr_i64leu(r: u32, ) -> Weight;
	fn instr_i64ges(r: u32, ) -> Weight;
	fn instr_i64geu(r: u32, ) -> Weight;
	fn instr_i64add(r: u32, ) -> Weight;
	fn instr_i64sub(r: u32, ) -> Weight;
	fn instr_i64mul(r: u32, ) -> Weight;
	fn instr_i64divs(r: u32, ) -> Weight;
	fn instr_i64divu(r: u32, ) -> Weight;
	fn instr_i64rems(r: u32, ) -> Weight;
	fn instr_i64remu(r: u32, ) -> Weight;
	fn instr_i64and(r: u32, ) -> Weight;
	fn instr_i64or(r: u32, ) -> Weight;
	fn instr_i64xor(r: u32, ) -> Weight;
	fn instr_i64shl(r: u32, ) -> Weight;
	fn instr_i64shrs(r: u32, ) -> Weight;
	fn instr_i64shru(r: u32, ) -> Weight;
	fn instr_i64rotl(r: u32, ) -> Weight;
	fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_contracts using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_process_deletion_queue_batch() -> Weight {
		(60_535_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `k` is `[0, 1024]`.
	fn on_initialize_per_trie_key(_k: u32, ) -> Weight {
		(1_395_626_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1025 as Weight))
	}
	// Storage: Contracts DeletionQueue (r:1 w:0)
	/// The range of component `q` is `[0, 128]`.
	fn on_initialize_per_queue_item(_q: u32, ) -> Weight {
		(367_817_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts PristineCode (r:1 w:0)
	// Storage: Contracts CodeStorage (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	fn reinstrument(_c: u32, ) -> Weight {
		(3_387_824_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	/// The range of component `c` is `[0, 131072]`.
	fn call_with_code_per_byte(_c: u32, ) -> Weight {
		(7_665_045_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		(553_360_000 as Weight)
			// Standard Error: 0
			.saturating_add((132_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate(_s: u32, ) -> Weight {
		(2_235_439_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn call() -> Weight {
		(208_084_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	fn upload_code(_c: u32, ) -> Weight {
		(3_784_987_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:0 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	fn remove_code() -> Weight {
		(56_286_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:2 w:2)
	fn set_code() -> Weight {
		(67_828_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_caller(_r: u32, ) -> Weight {
		(1_596_127_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_is_contract(_r: u32, ) -> Weight {
		(9_613_129_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1604 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_code_hash(_r: u32, ) -> Weight {
		(11_589_537_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1604 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_own_code_hash(_r: u32, ) -> Weight {
		(1_440_992_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_caller_is_origin(_r: u32, ) -> Weight {
		(529_213_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_address(_r: u32, ) -> Weight {
		(1_363_585_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_gas_left(_r: u32, ) -> Weight {
		(1_427_737_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_balance(_r: u32, ) -> Weight {
		(3_781_411_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_value_transferred(_r: u32, ) -> Weight {
		(1_572_663_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_minimum_balance(_r: u32, ) -> Weight {
		(1_441_153_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_block_number(_r: u32, ) -> Weight {
		(1_645_099_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_now(_r: u32, ) -> Weight {
		(1_427_156_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_weight_to_fee(_r: u32, ) -> Weight {
		(3_212_693_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_gas(_r: u32, ) -> Weight {
		(695_318_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_input(_r: u32, ) -> Weight {
		(1_362_093_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_input_per_kb(_n: u32, ) -> Weight {
		(12_114_734_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 1]`.
	fn seal_return(_r: u32, ) -> Weight {
		(229_184_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_return_per_kb(_n: u32, ) -> Weight {
		(685_240_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts DeletionQueue (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// The range of component `r` is `[0, 1]`.
	fn seal_terminate(_r: u32, ) -> Weight {
		(565_712_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_random(_r: u32, ) -> Weight {
		(4_464_396_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_deposit_event(_r: u32, ) -> Weight {
		(7_365_056_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:320 w:320)
	/// The range of component `t` is `[0, 4]`.
	/// The range of component `n` is `[0, 16]`.
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		(696_249_000 as Weight)
			// Standard Error: 26_125_000
			.saturating_add((355_680_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 6_531_000
			.saturating_add((75_648_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((80 as Weight).saturating_mul(t as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((80 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_debug_message(_r: u32, ) -> Weight {
		(939_782_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_set_storage(_r: u32, ) -> Weight {
		(5_932_179_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(804 as Weight))
			.saturating_add(T::DbWeight::get().writes(801 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_set_storage_per_new_kb(_n: u32, ) -> Weight {
		(1_896_617_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(85 as Weight))
			.saturating_add(T::DbWeight::get().writes(83 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_set_storage_per_old_kb(_n: u32, ) -> Weight {
		(1_835_661_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(85 as Weight))
			.saturating_add(T::DbWeight::get().writes(83 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_clear_storage(_r: u32, ) -> Weight {
		(6_061_565_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(805 as Weight))
			.saturating_add(T::DbWeight::get().writes(803 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_clear_storage_per_kb(_n: u32, ) -> Weight {
		(1_301_468_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(85 as Weight))
			.saturating_add(T::DbWeight::get().writes(83 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_get_storage(_r: u32, ) -> Weight {
		(4_602_437_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(804 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_get_storage_per_kb(_n: u32, ) -> Weight {
		(2_195_203_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(84 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_contains_storage(_r: u32, ) -> Weight {
		(4_224_010_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(804 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_contains_storage_per_kb(_n: u32, ) -> Weight {
		(1_655_640_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(84 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_take_storage(_r: u32, ) -> Weight {
		(6_058_890_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(805 as Weight))
			.saturating_add(T::DbWeight::get().writes(803 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_take_storage_per_kb(_n: u32, ) -> Weight {
		(2_502_135_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(85 as Weight))
			.saturating_add(T::DbWeight::get().writes(83 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_transfer(_r: u32, ) -> Weight {
		(45_696_448_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1605 as Weight))
			.saturating_add(T::DbWeight::get().writes(1602 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_call(_r: u32, ) -> Weight {
		(376_028_506_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1605 as Weight))
			.saturating_add(T::DbWeight::get().writes(1601 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_delegate_call(_r: u32, ) -> Weight {
		(372_966_148_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1539 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `c` is `[0, 1024]`.
	fn seal_call_per_transfer_clone_kb(t: u32, c: u32, ) -> Weight {
		(10_382_856_000 as Weight)
			// Standard Error: 1_481_263_000
			.saturating_add((2_370_009_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 1_446_000
			.saturating_add((14_317_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(85 as Weight))
			.saturating_add(T::DbWeight::get().reads((81 as Weight).saturating_mul(t as Weight)))
			.saturating_add(T::DbWeight::get().writes(81 as Weight))
			.saturating_add(T::DbWeight::get().writes((81 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1600 w:1600)
	/// The range of component `r` is `[0, 20]`.
	fn seal_instantiate(_r: u32, ) -> Weight {
		(597_646_146_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6406 as Weight))
			.saturating_add(T::DbWeight::get().writes(6404 as Weight))
	}
	// Storage: System Account (r:81 w:81)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `s` is `[0, 960]`.
	fn seal_instantiate_per_transfer_salt_kb(t: u32, s: u32, ) -> Weight {
		(19_461_995_000 as Weight)
			// Standard Error: 567_411_000
			.saturating_add((2_108_094_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 591_000
			.saturating_add((116_429_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(167 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(t as Weight)))
			.saturating_add(T::DbWeight::get().writes(165 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_hash_sha2_256(_r: u32, ) -> Weight {
		(1_287_021_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_sha2_256_per_kb(_n: u32, ) -> Weight {
		(65_956_893_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_hash_keccak_256(_r: u32, ) -> Weight {
		(1_840_932_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_keccak_256_per_kb(_n: u32, ) -> Weight {
		(223_702_744_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_hash_blake2_256(_r: u32, ) -> Weight {
		(1_759_327_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_blake2_256_per_kb(_n: u32, ) -> Weight {
		(88_291_674_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_hash_blake2_128(_r: u32, ) -> Weight {
		(1_597_200_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_blake2_128_per_kb(_n: u32, ) -> Weight {
		(91_762_907_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_ecdsa_recover(_r: u32, ) -> Weight {
		(69_727_379_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_ecdsa_to_eth_address(_r: u32, ) -> Weight {
		(41_605_403_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts OwnerInfoOf (r:1536 w:1536)
	/// The range of component `r` is `[0, 20]`.
	fn seal_set_code_hash(_r: u32, ) -> Weight {
		(22_988_538_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1540 as Weight))
			.saturating_add(T::DbWeight::get().writes(1537 as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64const(_r: u32, ) -> Weight {
		(350_104_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64load(_r: u32, ) -> Weight {
		(1_344_069_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64store(_r: u32, ) -> Weight {
		(742_519_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_select(_r: u32, ) -> Weight {
		(483_747_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_if(_r: u32, ) -> Weight {
		(360_153_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br(_r: u32, ) -> Weight {
		(246_207_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_if(_r: u32, ) -> Weight {
		(561_546_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_table(_r: u32, ) -> Weight {
		(450_675_000 as Weight)
	}
	/// The range of component `e` is `[1, 256]`.
	fn instr_br_table_per_entry(_e: u32, ) -> Weight {
		(662_968_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call(_r: u32, ) -> Weight {
		(595_249_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call_indirect(_r: u32, ) -> Weight {
		(754_822_000 as Weight)
	}
	/// The range of component `p` is `[0, 128]`.
	fn instr_call_indirect_per_param(_p: u32, ) -> Weight {
		(410_769_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_get(_r: u32, ) -> Weight {
		(335_988_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_set(_r: u32, ) -> Weight {
		(353_731_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_tee(_r: u32, ) -> Weight {
		(383_578_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_get(_r: u32, ) -> Weight {
		(390_771_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_set(_r: u32, ) -> Weight {
		(379_359_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_memory_current(_r: u32, ) -> Weight {
		(351_166_000 as Weight)
	}
	/// The range of component `r` is `[0, 1]`.
	fn instr_memory_grow(_r: u32, ) -> Weight {
		(819_094_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64clz(_r: u32, ) -> Weight {
		(394_819_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ctz(_r: u32, ) -> Weight {
		(733_361_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64popcnt(_r: u32, ) -> Weight {
		(391_542_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eqz(_r: u32, ) -> Weight {
		(422_411_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendsi32(_r: u32, ) -> Weight {
		(393_046_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendui32(_r: u32, ) -> Weight {
		(392_635_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i32wrapi64(_r: u32, ) -> Weight {
		(395_780_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eq(_r: u32, ) -> Weight {
		(441_828_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ne(_r: u32, ) -> Weight {
		(436_458_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64lts(_r: u32, ) -> Weight {
		(462_748_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ltu(_r: u32, ) -> Weight {
		(433_412_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gts(_r: u32, ) -> Weight {
		(442_600_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gtu(_r: u32, ) -> Weight {
		(917_861_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64les(_r: u32, ) -> Weight {
		(503_375_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64leu(_r: u32, ) -> Weight {
		(439_303_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ges(_r: u32, ) -> Weight {
		(434_715_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64geu(_r: u32, ) -> Weight {
		(439_524_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64add(_r: u32, ) -> Weight {
		(444_864_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64sub(_r: u32, ) -> Weight {
		(525_086_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64mul(_r: u32, ) -> Weight {
		(448_361_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divs(_r: u32, ) -> Weight {
		(464_571_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divu(_r: u32, ) -> Weight {
		(655_434_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rems(_r: u32, ) -> Weight {
		(455_835_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64remu(_r: u32, ) -> Weight {
		(453_139_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64and(_r: u32, ) -> Weight {
		(736_267_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64or(_r: u32, ) -> Weight {
		(503_055_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64xor(_r: u32, ) -> Weight {
		(444_332_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shl(_r: u32, ) -> Weight {
		(450_805_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shrs(_r: u32, ) -> Weight {
		(586_362_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shru(_r: u32, ) -> Weight {
		(567_727_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotl(_r: u32, ) -> Weight {
		(445_204_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotr(_r: u32, ) -> Weight {
		(502_283_000 as Weight)
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_process_deletion_queue_batch() -> Weight {
		(60_535_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `k` is `[0, 1024]`.
	fn on_initialize_per_trie_key(_k: u32, ) -> Weight {
		(1_395_626_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1025 as Weight))
	}
	// Storage: Contracts DeletionQueue (r:1 w:0)
	/// The range of component `q` is `[0, 128]`.
	fn on_initialize_per_queue_item(_q: u32, ) -> Weight {
		(367_817_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts PristineCode (r:1 w:0)
	// Storage: Contracts CodeStorage (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	fn reinstrument(_c: u32, ) -> Weight {
		(3_387_824_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	/// The range of component `c` is `[0, 131072]`.
	fn call_with_code_per_byte(_c: u32, ) -> Weight {
		(7_665_045_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		(553_360_000 as Weight)
			// Standard Error: 0
			.saturating_add((132_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate(_s: u32, ) -> Weight {
		(2_235_439_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn call() -> Weight {
		(208_084_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	fn upload_code(_c: u32, ) -> Weight {
		(3_784_987_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:0 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	fn remove_code() -> Weight {
		(56_286_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:2 w:2)
	fn set_code() -> Weight {
		(67_828_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_caller(_r: u32, ) -> Weight {
		(1_596_127_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_is_contract(_r: u32, ) -> Weight {
		(9_613_129_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1604 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_code_hash(_r: u32, ) -> Weight {
		(11_589_537_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1604 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_own_code_hash(_r: u32, ) -> Weight {
		(1_440_992_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_caller_is_origin(_r: u32, ) -> Weight {
		(529_213_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_address(_r: u32, ) -> Weight {
		(1_363_585_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_gas_left(_r: u32, ) -> Weight {
		(1_427_737_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_balance(_r: u32, ) -> Weight {
		(3_781_411_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_value_transferred(_r: u32, ) -> Weight {
		(1_572_663_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_minimum_balance(_r: u32, ) -> Weight {
		(1_441_153_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_block_number(_r: u32, ) -> Weight {
		(1_645_099_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_now(_r: u32, ) -> Weight {
		(1_427_156_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_weight_to_fee(_r: u32, ) -> Weight {
		(3_212_693_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_gas(_r: u32, ) -> Weight {
		(695_318_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_input(_r: u32, ) -> Weight {
		(1_362_093_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_input_per_kb(_n: u32, ) -> Weight {
		(12_114_734_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 1]`.
	fn seal_return(_r: u32, ) -> Weight {
		(229_184_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_return_per_kb(_n: u32, ) -> Weight {
		(685_240_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts DeletionQueue (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// The range of component `r` is `[0, 1]`.
	fn seal_terminate(_r: u32, ) -> Weight {
		(565_712_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_random(_r: u32, ) -> Weight {
		(4_464_396_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_deposit_event(_r: u32, ) -> Weight {
		(7_365_056_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:320 w:320)
	/// The range of component `t` is `[0, 4]`.
	/// The range of component `n` is `[0, 16]`.
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		(696_249_000 as Weight)
			// Standard Error: 26_125_000
			.saturating_add((355_680_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 6_531_000
			.saturating_add((75_648_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((80 as Weight).saturating_mul(t as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((80 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_debug_message(_r: u32, ) -> Weight {
		(939_782_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_set_storage(_r: u32, ) -> Weight {
		(5_932_179_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(804 as Weight))
			.saturating_add(RocksDbWeight::get().writes(801 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_set_storage_per_new_kb(_n: u32, ) -> Weight {
		(1_896_617_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(85 as Weight))
			.saturating_add(RocksDbWeight::get().writes(83 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_set_storage_per_old_kb(_n: u32, ) -> Weight {
		(1_835_661_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(85 as Weight))
			.saturating_add(RocksDbWeight::get().writes(83 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_clear_storage(_r: u32, ) -> Weight {
		(6_061_565_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(805 as Weight))
			.saturating_add(RocksDbWeight::get().writes(803 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_clear_storage_per_kb(_n: u32, ) -> Weight {
		(1_301_468_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(85 as Weight))
			.saturating_add(RocksDbWeight::get().writes(83 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_get_storage(_r: u32, ) -> Weight {
		(4_602_437_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(804 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_get_storage_per_kb(_n: u32, ) -> Weight {
		(2_195_203_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(84 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_contains_storage(_r: u32, ) -> Weight {
		(4_224_010_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(804 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_contains_storage_per_kb(_n: u32, ) -> Weight {
		(1_655_640_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(84 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_take_storage(_r: u32, ) -> Weight {
		(6_058_890_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(805 as Weight))
			.saturating_add(RocksDbWeight::get().writes(803 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_take_storage_per_kb(_n: u32, ) -> Weight {
		(2_502_135_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(85 as Weight))
			.saturating_add(RocksDbWeight::get().writes(83 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_transfer(_r: u32, ) -> Weight {
		(45_696_448_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1605 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1602 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_call(_r: u32, ) -> Weight {
		(376_028_506_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1605 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1601 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_delegate_call(_r: u32, ) -> Weight {
		(372_966_148_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1539 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `c` is `[0, 1024]`.
	fn seal_call_per_transfer_clone_kb(t: u32, c: u32, ) -> Weight {
		(10_382_856_000 as Weight)
			// Standard Error: 1_481_263_000
			.saturating_add((2_370_009_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 1_446_000
			.saturating_add((14_317_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(85 as Weight))
			.saturating_add(RocksDbWeight::get().reads((81 as Weight).saturating_mul(t as Weight)))
			.saturating_add(RocksDbWeight::get().writes(81 as Weight))
			.saturating_add(RocksDbWeight::get().writes((81 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1600 w:1600)
	/// The range of component `r` is `[0, 20]`.
	fn seal_instantiate(_r: u32, ) -> Weight {
		(597_646_146_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(6406 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6404 as Weight))
	}
	// Storage: System Account (r:81 w:81)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `s` is `[0, 960]`.
	fn seal_instantiate_per_transfer_salt_kb(t: u32, s: u32, ) -> Weight {
		(19_461_995_000 as Weight)
			// Standard Error: 567_411_000
			.saturating_add((2_108_094_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 591_000
			.saturating_add((116_429_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(167 as Weight))
			.saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(t as Weight)))
			.saturating_add(RocksDbWeight::get().writes(165 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_hash_sha2_256(_r: u32, ) -> Weight {
		(1_287_021_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_sha2_256_per_kb(_n: u32, ) -> Weight {
		(65_956_893_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_hash_keccak_256(_r: u32, ) -> Weight {
		(1_840_932_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_keccak_256_per_kb(_n: u32, ) -> Weight {
		(223_702_744_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_hash_blake2_256(_r: u32, ) -> Weight {
		(1_759_327_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_blake2_256_per_kb(_n: u32, ) -> Weight {
		(88_291_674_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_hash_blake2_128(_r: u32, ) -> Weight {
		(1_597_200_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_blake2_128_per_kb(_n: u32, ) -> Weight {
		(91_762_907_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_ecdsa_recover(_r: u32, ) -> Weight {
		(69_727_379_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_ecdsa_to_eth_address(_r: u32, ) -> Weight {
		(41_605_403_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts OwnerInfoOf (r:1536 w:1536)
	/// The range of component `r` is `[0, 20]`.
	fn seal_set_code_hash(_r: u32, ) -> Weight {
		(22_988_538_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1540 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1537 as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64const(_r: u32, ) -> Weight {
		(350_104_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64load(_r: u32, ) -> Weight {
		(1_344_069_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64store(_r: u32, ) -> Weight {
		(742_519_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_select(_r: u32, ) -> Weight {
		(483_747_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_if(_r: u32, ) -> Weight {
		(360_153_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br(_r: u32, ) -> Weight {
		(246_207_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_if(_r: u32, ) -> Weight {
		(561_546_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_table(_r: u32, ) -> Weight {
		(450_675_000 as Weight)
	}
	/// The range of component `e` is `[1, 256]`.
	fn instr_br_table_per_entry(_e: u32, ) -> Weight {
		(662_968_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call(_r: u32, ) -> Weight {
		(595_249_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call_indirect(_r: u32, ) -> Weight {
		(754_822_000 as Weight)
	}
	/// The range of component `p` is `[0, 128]`.
	fn instr_call_indirect_per_param(_p: u32, ) -> Weight {
		(410_769_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_get(_r: u32, ) -> Weight {
		(335_988_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_set(_r: u32, ) -> Weight {
		(353_731_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_tee(_r: u32, ) -> Weight {
		(383_578_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_get(_r: u32, ) -> Weight {
		(390_771_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_set(_r: u32, ) -> Weight {
		(379_359_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_memory_current(_r: u32, ) -> Weight {
		(351_166_000 as Weight)
	}
	/// The range of component `r` is `[0, 1]`.
	fn instr_memory_grow(_r: u32, ) -> Weight {
		(819_094_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64clz(_r: u32, ) -> Weight {
		(394_819_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ctz(_r: u32, ) -> Weight {
		(733_361_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64popcnt(_r: u32, ) -> Weight {
		(391_542_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eqz(_r: u32, ) -> Weight {
		(422_411_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendsi32(_r: u32, ) -> Weight {
		(393_046_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendui32(_r: u32, ) -> Weight {
		(392_635_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i32wrapi64(_r: u32, ) -> Weight {
		(395_780_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eq(_r: u32, ) -> Weight {
		(441_828_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ne(_r: u32, ) -> Weight {
		(436_458_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64lts(_r: u32, ) -> Weight {
		(462_748_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ltu(_r: u32, ) -> Weight {
		(433_412_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gts(_r: u32, ) -> Weight {
		(442_600_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gtu(_r: u32, ) -> Weight {
		(917_861_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64les(_r: u32, ) -> Weight {
		(503_375_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64leu(_r: u32, ) -> Weight {
		(439_303_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ges(_r: u32, ) -> Weight {
		(434_715_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64geu(_r: u32, ) -> Weight {
		(439_524_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64add(_r: u32, ) -> Weight {
		(444_864_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64sub(_r: u32, ) -> Weight {
		(525_086_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64mul(_r: u32, ) -> Weight {
		(448_361_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divs(_r: u32, ) -> Weight {
		(464_571_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divu(_r: u32, ) -> Weight {
		(655_434_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rems(_r: u32, ) -> Weight {
		(455_835_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64remu(_r: u32, ) -> Weight {
		(453_139_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64and(_r: u32, ) -> Weight {
		(736_267_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64or(_r: u32, ) -> Weight {
		(503_055_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64xor(_r: u32, ) -> Weight {
		(444_332_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shl(_r: u32, ) -> Weight {
		(450_805_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shrs(_r: u32, ) -> Weight {
		(586_362_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shru(_r: u32, ) -> Weight {
		(567_727_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotl(_r: u32, ) -> Weight {
		(445_204_000 as Weight)
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotr(_r: u32, ) -> Weight {
		(502_283_000 as Weight)
	}
}
